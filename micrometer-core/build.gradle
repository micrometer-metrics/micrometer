plugins {
    id "org.jetbrains.kotlin.jvm" version "1.7.22"
    id 'me.champeau.mrjar' version "0.1.1"
}

description 'Core module of Micrometer containing instrumentation API and implementation'

multiRelease {
    targetVersions 8, 11
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = javaTargetVersion
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinTest).all {
    kotlinOptions {
        jvmTarget = JavaVersion.toVersion(javaLanguageVersion)
    }
}

dependencies {
    api project(":micrometer-commons")
    api project(":micrometer-observation")

    java11Api project(":micrometer-commons")
    java11Api project(":micrometer-observation")

    // HdrHistogram is needed at runtime when client-side percentiles are configured
    implementation 'org.hdrhistogram:HdrHistogram'
    // LatencyUtils is needed at runtime when pause detection is enabled
    implementation('org.latencyutils:LatencyUtils') {
        exclude group: 'org.hdrhistogram', module: 'HdrHistogram'
    }

    // Aspects
    optionalApi 'org.aspectj:aspectjweaver'

    // instrumentation options
    optionalApi 'io.dropwizard.metrics:metrics-core' // TODO move dropwizard out of core module? DropwizardMeterRegistry for e.g. JMX registry

    // cache monitoring
    optionalApi 'com.google.guava:guava'
    optionalApi 'com.github.ben-manes.caffeine:caffeine'
    optionalApi 'net.sf.ehcache:ehcache'
    optionalApi 'javax.cache:cache-api'
    optionalApi 'com.hazelcast:hazelcast'
    optionalApi 'org.hibernate:hibernate-entitymanager'

    // server runtime monitoring
    optionalApi 'org.eclipse.jetty:jetty-server'
    // jakarta servlet
    optionalApi 'jakarta.servlet:jakarta.servlet-api'
    optionalApi 'org.eclipse.jetty:jetty-client'
    optionalApi 'org.apache.tomcat.embed:tomcat-embed-core'
    optionalApi 'org.glassfish.jersey.core:jersey-server'
    optionalApi 'io.grpc:grpc-api'

    // apache httpcomponents monitoring
    optionalApi 'org.apache.httpcomponents:httpclient'
    optionalApi 'org.apache.httpcomponents:httpasyncclient'

    // hystrix monitoring
    optionalApi 'com.netflix.hystrix:hystrix-core'

    // log monitoring
    optionalApi 'ch.qos.logback:logback-classic'
    optionalApi 'org.apache.logging.log4j:log4j-core'

    optionalApi 'com.squareup.okhttp3:okhttp'

    optionalApi 'org.mongodb:mongodb-driver-sync'

    optionalApi 'org.jooq:jooq'

    optionalApi 'org.apache.kafka:kafka-clients'
    optionalApi 'org.apache.kafka:kafka-streams'

    optionalApi project(':micrometer-observation')
    optionalApi 'io.micrometer:context-propagation'

    // kotlin
    optionalApi 'org.jetbrains.kotlin:kotlin-reflect'
    optionalApi 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    optionalApi 'org.jetbrains.kotlinx:kotlinx-coroutines-core'

    testImplementation 'io.projectreactor:reactor-test'
    testImplementation project(":micrometer-observation-test")
    java11TestImplementation project(":micrometer-observation-test")

    // dependency injection tests
    testImplementation 'javax.inject:javax.inject'
    testImplementation 'org.springframework:spring-context'
    testImplementation 'com.google.inject:guice'

    // Uncomment these if you are interested in testing injection with dagger in MeterRegistryInjectionTest
    // testImplementation 'com.google.dagger:dagger'
    // testAnnotationProcessor 'com.google.dagger:dagger-compiler'

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'com.tngtech.archunit:archunit-junit5'

    testImplementation 'org.mockito:mockito-core'

    testImplementation 'org.hsqldb:hsqldb'
    testImplementation 'com.h2database:h2'

    testImplementation 'org.assertj:assertj-core'
    java11TestImplementation 'org.assertj:assertj-core'
    testImplementation 'org.awaitility:awaitility'

    testImplementation 'org.ehcache:ehcache'

    testImplementation 'org.apache.kafka:kafka-clients'

    testImplementation libs.commonsPool2

    testImplementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory'
    testRuntimeOnly 'org.glassfish.jersey.inject:jersey-hk2'

    testImplementation 'ru.lanwen.wiremock:wiremock-junit5'
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone'
    java11TestImplementation 'com.github.tomakehurst:wiremock-jre8-standalone'

    // Log4j2 Async dependency
    testImplementation libs.lmaxDisruptor

    // Kafka binder IT dependencies
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:kafka'

    // Postgres Binder IT dependencies
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.postgresql:postgresql'

    testImplementation 'org.testcontainers:mongodb'

    // Dependencies for @ClassPathExclusions
    testImplementation("org.junit.platform:junit-platform-engine")
    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation(libs.mavenResolverConnectorBasic)
    testImplementation(libs.mavenResolverProvider) {
        exclude(group: "javax.inject", module: "javax.inject")
    }
    testImplementation(libs.mavenResolverTransportHttp) {
        exclude group: "org.slf4j", module: "jcl-over-slf4j"
    }
    // gRPC
    testImplementation("io.grpc:grpc-core")
    testImplementation("io.grpc:grpc-testing-proto")
}

task shenandoahTest(type: Test) {
    // set heap size for the test JVM(s)
    maxHeapSize = "1500m"

    useJUnitPlatform {
        includeTags 'gc'
    }

    jvmArgs '-XX:+UseShenandoahGC'
}

task zgcTest(type: Test) {
    // set heap size for the test JVM(s)
    maxHeapSize = "1500m"

    useJUnitPlatform {
        includeTags 'gc'
    }

    jvmArgs '-XX:+UseZGC'
}

task openj9BalancedTest(type: Test) {
    // set heap size for the test JVM(s)
    maxHeapSize = "1500m"

    useJUnitPlatform {
        includeTags 'gc'
    }

    jvmArgs '-Xgcpolicy:balanced'
}

task openj9ConcurrentScavengeTest(type: Test) {
    // set heap size for the test JVM(s)
    maxHeapSize = "1500m"

    useJUnitPlatform {
        includeTags 'gc'
    }

    jvmArgs '-Xgc:concurrentScavenge'
}

java11Test {
    // set heap size for the test JVM(s)
    maxHeapSize = "1500m"

    useJUnitPlatform {
        excludeTags 'docker'
    }

    include {
        it.getFile().getAbsolutePath().contains("java11Test")
    }

    retry {
        maxFailures = 5
        maxRetries = 3
    }
}
